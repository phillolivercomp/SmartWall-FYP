<%+header%>
<script src="/luci-static/resources/jquery-3.1.1.min.js"></script>
<script src="/luci-static/resources/Chart.js"></script>
<span id= "Status" style="float: right;">Status: Unknown</span>
<h1 id="pageHeader"><%:Connections Log%></h1>
<input id="refresh" type = "button" value= "Refresh" onclick="refresh();" style = "float: left;" />
<input id="goBack" type="button" value="Back" onclick="back();" style="float: right;" />

<script type ="text/javascript">

	//SECTION Declaration of global variables
	/**
	- intepreter handles requests to lua on the web server
	- globalPage tracks which page of results the user is viewing
	- cellsVar shows how many results will be shown per page
	- results holds results of mac lookup making it accessible from anywhere
	- max holds greatest length value of the result set (just to remove clutter)
	- pages tracks how many pages exist of results
	- globalMac defines the MAC address that is currently being viewed
	- globalDev defines name of the device currently being viewed
	- globalIP defines IP address currently being inspected
	- globalHostname defines hostname currently being inspected
	- currPage tracks current page
	- portChart initialises chart in breakdown
	- otherDevChart initialises chart in breakdown 
	*/
	var interpreter = new XHR();
	var globalPage = 0;
	var cellsVar = 20;
	var results;
	var max;
	var pages;
	var globalMac = "";
	var globalDev = "";
	var globalIP = "";
	var globalHostname = "";
	var toIPbreakdown = "";
	var currPage;
	var portChart;
	var otherDevChart;
	var portDictionary = {"20":"FTP","21":"FTP","22":"SSH", "23":"Telnet", "25": "SMTP", "53": "DNS", "67":"DHCP", "68":"DHCP", "80":"HTTP", "110":"POP", "123":"NTP", "137":"NetBIOS", "138":"NetBIOS", "139":"NetBIOS", "143":"IMAP", "161":"SNMP", "162":"SNMP", "179":"BGP", "389":"LDAP", "443":"HTTPS", "636":"LDAPS", "989":"FTP w/TLS", "990":"FTP w/TLS"};

	//Translates port number to service name for common services
	function get_Port_Usage(port){
		var portStr = port.toString();
		var usage = portDictionary[portStr];

		if(usage != null){
			return usage + " - ";
		}

		return "";
	}

	// SECTION - TCP DUMP CHECKER
	// Defines functions to be used for tcp dump status bar at top of webpage
	function check_tcpdump(){
		// Checks tcpDump script is running on machine
		interpreter.get('<%=luci.dispatcher.build_url("admin", "smart_tab", "check_tcpdump")%>', null,
			function(_,result){
				var returnValue = result;

				if(returnValue.value == "True"){
					//Set text and colour to show running
					document.getElementById("Status").innerHTML = "Status = Running"
					document.getElementById("Status").style.backgroundColor = "hsl(120,100%,80%)";
					document.getElementById("Status").style.borderRadius = "20px"
				}
				else if(returnValue.value = "False"){
					//Set text and colour to show not running
					document.getElementById("Status").innerHTML = "Status = Stopped"
					document.getElementById("Status").style.backgroundColor = "hsl(0,100%,80%)";
					document.getElementById("Status").style.borderRadius = "20px"
				}
			}
			)
	};
	//Call method straight away
	check_tcpdump();

	//SECTION Connection listing Visuals
	//Defines ways to translate a number into a file size and vice versa
	//Defines way to display values with colours on webpage
	function bytesToSize(byteSize) {
   		var sizeResults = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
   		if (byteSize == 0){
   			return '0 Byte';
   		}
   		var i = parseFloat(parseInt(Math.floor(Math.log(byteSize) / Math.log(1024))));
   		var res = (parseFloat(byteSize) / parseFloat(Math.pow(1024, i))).toFixed(1) + ' ' + sizeResults[i];
   		return res;
	};

	//Reverse of byteToSize. Not 100% accurate due to rounding previously
	function sizeToBytes(sizeTxt){
		var size = sizeTxt + '';
		var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
		var sizeElems = size.split(" ")

		var n = sizes.indexOf(sizeElems[1]);
		var res = sizeElems[0] * Math.pow(1024, n);

		return res;
	}
	// Updates time of last refresh in the UI
	function updateTime(){
		//Get date
		var d = new Date();
		//Set date
		document.getElementById("time").innerHTML = "Page updated at: " + d.toLocaleDateString() + " - " + d.toLocaleTimeString();
	}

	// Sets the colour values for length in the web UI
	// Low value = red, high value = green
	function set_Colour_Value(max){
		//Takes maximum value from set of data and sets this to be green value
		var upperBound = Math.cbrt(max);
		var unit = 120/upperBound;
		//Takes length cells and paints them dependant on their value
		var lowerBound = 0;
		var table = document.getElementsByClassName("mac-cell-length");
		
		for (var i = 0; i < table.length; i++){
			// Scales hue and lightness dependant on value of cell
			var cellText = table[i].innerHTML;
			var cellValue = Math.cbrt(sizeToBytes(cellText));
			var scaledValue = unit * cellValue;
			var lightnessScalar = 55 + (30*(cellValue/upperBound));
			table[i].style.backgroundColor = "hsl(" + scaledValue+ ",100%," + lightnessScalar + "%)";
		}
		
	}

	//SECTION Refresh button
	//Creates context sensitive button for reloading information
	function refresh(){
		if (globalMac == ""){
			get_MACs();
		}
		else if(currPage == "macResults"){
			get_Results(globalMac, globalDev);
		}
		else if(currPage == "breakdown"){
			open_Breakdown(globalIP, globalMac, globalHostname)
		}
	};

	//Checks what page user is on and takes them back to last one
	function back(){

		//If no current page, something has gone wrong
		if (currPage == ""){
			alert("Undefined behaviour");
		}
		//If macResults, go back to connections log
		else if(currPage == "macResults"){
			document.getElementById("pageHeader").innerHTML ="Connections Log"
			get_MACs();
		}
		//If breakdown, reopen results with fresh data and destroy breakdown page
		else if(currPage == "breakdown"){
			open_Results(globalPage, results);
			clear_Breakdown(toIPbreakdown, globalMac);
		}
	};
	

	//SECTION Result generation
	// Function to pull the MAC addresses being monitored from the config file and their respective names
	// Will then add these to a table to be displayed to user	
	function get_MACs(){

		// Set styling for table and buttons
		globalPage = 0;
		globalMac = "";
		globalDev = "";
		globalIP = "";
		globalHostname = "";
		currPage = "";
		document.getElementById("tableResults").style.opacity = 0.5;
		document.getElementById("tableResults").style.pointerEvents = 'none';
		document.getElementById("previousPage").style.visibility = "hidden";
		document.getElementById("nextPage").style.visibility = "hidden";

		// Make LUA call to get back JSON object containing results saved to results var
		interpreter.get('<%=luci.dispatcher.build_url("admin", "smart_tab", "connections_select")%>', null,
			function(_, MACs){

				var macResults = MACs;

				// Make listMACs value which will be used to fill our table at the end
				var listMACs = "<table id = \"mac-table\" class=\"cbi-section-table\"><tbody>";
				listMACs += "<tr><th>Device Name</th><th>MAC Address </th></tr>";

				// Loop over results creating a cell for each with
				if (macResults != null){

					for (var i = 0; i < macResults.length; i++){
						var mac = macResults[i];

						if(mac != ''){

							// Formula for table cell for each value which is clickable to run OpenResults method
							listMACs += '<tr draggable = "true" onclick = "get_Results(\'' + mac.devMAC + '\', \'' + mac.devName + '\')">'
								+ '<td class = "mac-cell" style = "width:55%;">'
								+ mac.devName
								+ '</td>'
								+ '<td class = "mac-cell" style = "width:55%;">'
								+ mac.devMAC
								+ '</td>'
								+ '</tr>';
						}
					}
				}
				else{
					listMACs += '<tr draggable = "true">'
							+ '<td>'
							+ 'No results found'
							+ '</td>'
							+ '<td>'
							+ 'Check config page or refresh page'
							+ '</td>'
				}

				// Adds listMACs var to content of table and sets styling.
				listMACs += "</table>";
				document.getElementById("tableResults").innerHTML=listMACs;
               			document.getElementById("tableResults").style.pointerEvents='auto';
                		document.getElementById("tableResults").style.opacity=1;
                		document.getElementById("goBack").style.visibility = "hidden";
		}
		)


	};

	// Function which takes MAC and with this generates results from SQL table representing connections
	function get_Results(MAC, devName) {
		//Update time of system
		updateTime();
		//Set styling
		document.getElementById("pageHeader").innerHTML = "Connections Log - " + devName;
		document.getElementById("tableResults").style.opacity = 0.5;
		document.getElementById("tableResults").style.pointerEvents = 'none';
		//Set global variables to new values determined by call
		globalMac = MAC;
		globalDev = devName;
		globalIP = "";
		globalHostname = "";
		currPage = "macResults";


		// Call to LUA to get connections history passing it an MAC
		interpreter.get('<%=luci.dispatcher.build_url("admin", "smart_tab", "connections_list")%>', {MAC:MAC},
			function(_, sql){
				results = sql;

				// Calls open results (which will always be first page)
				if (results != null){
					var firstVal = results[0]
					max = firstVal.length;

					// Gets length of results and finds number of pages of data there are from this
					var resultsLen = results.length;
					pages = Math.ceil(resultsLen/cellsVar);

					open_Results(globalPage, results);
				}
				else{
					max = 0;
					pages = 0;

					alert("There are no entries in this table yet")
					get_MACs()
				}
			}
		)
	};

	// Method which takes in page number and set of results and generates and update table with these
	function open_Results(page, results){
		currPage = "macResults";
		document.getElementById("tablePage").style.display = "block";
		document.getElementById("resultsPage").style.display = "none";
		// Sets visibility of navigation buttons accordingly
		if(globalPage == 0 && globalPage == pages-1){
			document.getElementById("previousPage").style.visibility = "hidden";
			document.getElementById("nextPage").style.visibility = "hidden";
		}
		else if(globalPage == 0 && globalPage != pages-1){
			document.getElementById("previousPage").style.visibility = "hidden";
			document.getElementById("nextPage").style.visibility = "visible";
		}
		else if(globalPage == pages-1){
			document.getElementById("previousPage").style.visibility = "visible";
			document.getElementById("nextPage").style.visibility = "hidden";
		}
		else{
			document.getElementById("previousPage").style.visibility = "visible";
			document.getElementById("nextPage").style.visibility = "visible";
		}

		// Create indexes for start and end of results to be shown accounting for list size
		var startIndex = page * cellsVar;
		var finalIndex = ((page + 1) * cellsVar) - 1;
		if(finalIndex > results.length){
			finalIndex = results.length -1;
		}

		// Create object to hold table and push html into it
		var listConns = "<table id=\"sql-table\" class=\"cbi-section-table\"><tbody>";
		listConns+= "<tr><th>To IP</th><th>Hostname</th><th>Connection frequency</th></tr>";

		for (var index = startIndex; index <= finalIndex; index++){
			var result = results[index];
				if(result != ''){
					result.renameHost = '<a class="renameOp btn show-on-hover" onclick="rename_IP(\''
						+ result.toIP + '\',\'' +result.hostname
						+ '\');">Rename</a>'
					listConns += '<tr draggable = "true" onclick = "open_Breakdown(\''
						+ result.toIP + '\', \'' + result.monitorMAC + '\', \'' + result.hostname + '\')">'
						+ '<td class = "mac-cell" style = "width:25%;;">'
						+ result.toIP
						+ '</td>'
						+ '<td class = "mac-cell" style = "width:55%;;">'
						+ result.hostname + result.renameHost
						+ '</td>'
						+ '<td class = "mac-cell-length" style = "width:15%;;">'
						+ bytesToSize(result.length)
						+ '</td>'
						+ '</tr>';
				}
		}

		listConns += "</table>";
		document.getElementById("tableResults").innerHTML=listConns;
		document.getElementById("tableResults").style.pointerEvents='auto';
		document.getElementById("tableResults").style.opacity=1;
		document.getElementById("goBack").style.visibility = "visible";
		set_Colour_Value(max);
	};

	//Renames the DNS entry of the IP address in the SQL database
	function rename_IP(ip, currentName){

		//Prompt user for new name with default value as current name
		var newName = prompt('Insert new hostname:', currentName);
		//If name entered, call LUA function
		if(newName != null){
			//Pass ip and new name
			interpreter.get('<%=luci.dispatcher.build_url("admin", "smart_tab", "rename_host")%>', {
				ip:ip,
				newName:newName
			},
			function(_, sql){
				//Alert user and refresh page
				alert("Result updated, this may take some time to appear.")
				refresh();

			});
		}
		//Prevent and further actions being called from UI overlaps of buttons
		event.stopPropagation();
	}

	//SECTION Navigation
	// Increments global page counter and runs open_Results method with this
	function next_Page(){
		globalPage++;
		open_Results(globalPage, results);
	};

	// Decrements global page counter and runs open_Results method with this
	function previous_Page(){
		globalPage--;
		open_Results(globalPage, results);
	};

	//SECTION Breakdown Page

	//Method that takes data and from geoplugin website and parses it
	//Generates and fills data into geoTableDiv
	function geoDisplay(data){
		//If status is not 200, something has gone wrong, display error
		if(data.geoplugin_status != 200){
			//Creates table with relevant columns and fills with blank data
			var geoTable = "<table id=\"geoTable\" class=\"cbi-section-table\"><tbody>";
			geoTable += '<tr><td class = "mac-cell"><b>Country</b></td>'
					+ '<td class = "mac-cell">-</td></tr>'
					+ '<tr><td class = "mac-cell"><b>Region</b></td>'
					+ '<td class = "mac-cell">-</td></tr>'
					+ '<tr><td class = "mac-cell"><b>City</b></td>'
					+ '<td class = "mac-cell">-</td></tr>'
					+ '<tr><td class = "mac-cell"><b>Latitude</b></td>'
					+ '<td class = "mac-cell">-</td></tr>'
					+ '<tr><td class = "mac-cell"><b>Longitude</b></td>'
					+ '<td class = "mac-cell">-</td></tr>';

			//Set style
			document.getElementById("geoTableDiv").innerHTML=geoTable;
			document.getElementById("geoTableDiv").style.pointerEvents='auto';
			document.getElementById("geoTableDiv").style.opacity=1;
		}
		//Else parse and display data into table
		else{
			//Creates table with appropriate columns and values
			var geoTable = "<table id=\"geoTable\" class=\"cbi-section-table\"><tbody>";
			geoTable += '<tr><td class = "mac-cell"><b>Country</b></td>'
					+ '<td class = "mac-cell">' + data.geoplugin_countryName + '</td></tr>'
					+ '<tr><td class = "mac-cell"><b>Region</b></td>'
					+ '<td class = "mac-cell">' + data.geoplugin_regionName + '</td></tr>'
					+ '<tr><td class = "mac-cell"><b>City</b></td>'
					+ '<td class = "mac-cell">' + data.geoplugin_city + '</td></tr>'
					+ '<tr><td class = "mac-cell"><b>Latitude</b></td>'
					+ '<td class = "mac-cell">' + data.geoplugin_latitude + '</td></tr>'
					+ '<tr><td class = "mac-cell"><b>Longitude</b></td>'
					+ '<td class = "mac-cell">' + data.geoplugin_longitude + '</td></tr>';
			//Set style
			document.getElementById("geoTableDiv").innerHTML=geoTable;
			document.getElementById("geoTableDiv").style.pointerEvents='auto';
			document.getElementById("geoTableDiv").style.opacity=1;
		}
	}

	//Takes IP and mac address and opens up Page to display relevant information about their relationship
	function open_Breakdown(ip, mac, hostName){
		//Hide the tablePage and show resultsPage
		document.getElementById("tablePage").style.display = "none";
		document.getElementById("resultsPage").style.display = "block";
		document.getElementById("reportHeader").innerHTML = globalDev + " connections to " + ip;
		document.getElementById("reportSubHeader").innerHTML = hostName;
		updateTime();
		//Log what page we are on
		currPage = "breakdown";
		globalIP = ip;
		globalHostname = hostName;
		toIPbreakdown = ip;
		var breakDownResults;
		//Send request with the ipPlusMac variable
		interpreter.get('<%=luci.dispatcher.build_url("admin", "smart_tab", "connection_breakdown")%>', {ip:ip, mac:mac},
			function(_, sql){
				//Hold results sent back
				breakDownResults = sql;

				//Check to make sure we have results
				if (breakDownResults != null){
					
					//Utilise JSONP service offered by geoplugin passing it IP and callback to geoDisplay
					var geoScript = document.createElement('script');
					geoScript.src = 'http://www.geoplugin.net/json.gp?ip=' + ip
					+ '&jsoncallback=geoDisplay';

					//Append this script to page so it is called
					document.getElementById("resultsPage").appendChild(geoScript);

					//Calls and holds object that has port numbers against their collective length of packets sent
					var portWithLen = mergeInOut(breakDownResults);

					//Holds the values without ports
					var portLengths = Object.values(portWithLen);
					//Generates colours that will be displayed in chart
					var colourVals = colourList(portLengths.length);
					//Holds ports without the values
					var labelVals = Object.keys(portWithLen);

					//Create object to hold chart
					var ctx = document.getElementById("portChart");

					//Collects variable into data object
					var data = {
					    datasets: [{
					        data: portLengths,
					        backgroundColor: colourVals,
					        label: 'My dataset' // for legend
					    }],
					    labels: labelVals
					};

					//Creats chart
					portChart = new Chart(ctx, {
					    data: data,
					    type: "doughnut",
					    options: {
					    	//Animation is enabled
					        animation: {
					            animateScale: true
					        },
					        tooltips: {
					        	callbacks: {
					        		//Renames labels of the chart to read as file size not an int
					        		label: function(tooltipItem, data) {
					        			var tableContents = data.datasets[tooltipItem.datasetIndex].data;
					        			var label = data.labels[tooltipItem.index];
					        			var cellData =  tableContents[tooltipItem.index];
					        			return label + ": " + bytesToSize(cellData);
					        		}
					        	}
					        }
					    }
					});
					genPortTable(breakDownResults);
					genOtherDevicesChart(toIPbreakdown);
				}
			}
		)		
	};

	//Creates the table for the ports breakdown
	function genPortTable(results){
		//Initiate table
		var portTableContents = "<table id=\"portTable\" class=\"cbi-section-table\"><tbody>";
		portTableContents+= "<tr><th>Port</th><th>Direction</th><th>Data sent</th></tr>";
		for(var i = 0; i < results.length; i++){
			//Loop over results and generate row for each result
			result = results[i];
			var usage = get_Port_Usage(result.port);
			portTableContents += '<tr draggable = "true">'
						+ '<td class = "mac-cell" style = "width:40%;;">'
						+ usage + result.port
						+ '</td>'
						+ '<td class = "mac-cell" style = "width:20%;;">'
						+ result.connection
						+ '</td>'
						+ '<td class = "mac-cell-length" style = "width:40%;;">'
						+ bytesToSize(result.length)
						+ '</td>'
						+ '</tr>';
		};
		//Close table
		portTableContents += '</table>';
		//Set table breakdown element as table created
		document.getElementById("tableBreakdown").innerHTML = portTableContents;
	};

	//Starts process of creating chart for others devices traffic to that IP
	function genOtherDevicesChart(ip){
		//Calls LUA function
		interpreter.get('<%=luci.dispatcher.build_url("admin", "smart_tab", "connections_select")%>', null,
				function(_, MACs){
						var devices = MACs;
						//Call to helper function
						genOtherHelper(devices, ip);
				})
	}

	//Helper function for creating table
	function genOtherHelper(macs, ip){
		//Calls LUA function
		interpreter.get('<%=luci.dispatcher.build_url("admin", "smart_tab", "get_other")%>', {ip:ip},
				function(_, res){
					//Initiate variables
					var history = res;
					var macList = {};
					//Loop over results and set relevant information
					for(var i = 0; i < macs.length; i++){
						var deviceName = macs[i].devName;
						var macToFind = macs[i].devMAC;
						var length = 0;
						//Sum lengths of data flow into one value for each mac
						for(var j = 0; j < history.length; j++){
							if(macToFind == history[j].monitorMAC){
								length = history[j].len;
							}
						}
						macList[deviceName] = length;
					}
					//Call chart creation function
					makeOtherDevChart(macList);
				})
	}

	//Function that takes data and creates chart from it
	function makeOtherDevChart(obj){
		//Get chart element and save to variable
		var ctx = document.getElementById("otherDevChart");

		//Split values from the data
		var macKeys = Object.keys(obj);
		var lenVals = Object.values(obj);
		//Create colour values from data length
		var backColours = colourListAlpha(macKeys.length, "0.2");
		var borderColours = colourListAlpha(macKeys.length, "1.0");
		//Initiate data object for chart with values in correct format
		var data = {
			labels: macKeys,
			datasets: [
				{
					label: "Other device usage",
					backgroundColor: backColours,
					borderColor: borderColours,
					borderWidth: 1,
					data: lenVals,
				}
			]
		};
		//Initiate the chart
		otherDevChart = new Chart(ctx, {
	    		type: 'bar',
	    		data: data,
	    		options: {
	    			legend: {
	    				//Hides the label above chart
    					display: false,
					},
	    			tooltips: {
			        	callbacks: {
			        		//Renames labels of the chart to read as file size not an int
			        		label: function(tooltipItem, data) {
			        			var tableContents = data.datasets[tooltipItem.datasetIndex].data;
			        			var cellData =  tableContents[tooltipItem.index];
			        			return bytesToSize(cellData);
			        		}
			        	}	
			        },
	        		scales: {
	            		xAxes: [{
	                		stacked: true
	            		}],
	            		yAxes: [{
	                		stacked: true,
	                		ticks: {
	                			//Changes the scales to read as file size and not a large number
						        callback: function (valuePayload) {
									return bytesToSize(valuePayload);
									}					
						       }
	            		}]
	        		}
        	}	
		});
	}

	//Destroys chart and resets breakdown page
	function clear_Breakdown(){
		document.getElementById("geoTableDiv").innerHTML = "";
		document.getElementById("portChart").innerHTML = "";
		document.getElementById("otherDevChart").innerHTML = "";
		portChart.destroy();
		otherDevChart.destroy();
	};

	//Takes results and collects ports used with their lengths
	function mergeInOut(breakDown){
		var dataObject = {};
		for(var i = 0; i < breakDown.length; i++){
			var port = "Port: " + breakDown[i].port.toString();
			if(dataObject.hasOwnProperty(port)){
				dataObject[port] = dataObject[port] + breakDown[i].length;
			}
			else{
				dataObject[port] = breakDown[i].length;
			}
		}
		return dataObject
	};

	//Method to generate colour values from how many results we have
	function colourList(integerVal){
		if (integerVal == 1){
			return ["#00FF00"];
		}
		var colourList = [];
		var weightedVal = Math.ceil(510/(integerVal-1));
		for(var i = 0; i < integerVal; i++){
			var red = 0 + (weightedVal*i);
			var green = 510 - (weightedVal*i);
			if(green > 255){green = 255};
			if(green < 0){green = 0};
			if(red > 255){red = 255};

			var redStr = ("0" + red.toString(16)).substr(-2);
			var greenStr = ("0" + green.toString(16)).substr(-2);
			colourList[i] = "#" + redStr + greenStr + "00";


		}
		return colourList;
	};

	//Method to generate colour values with result length with alpha channel included.
	function colourListAlpha(integerVal, transparency){
		//If only one value, return red with transparency
		if(integerVal == 1){
			return ["rgba(255, 0, 0, " + transparency + ")"]
		}
		//Create variables and get weighted value to interate with
		var colourList = [];
		var weightedVal = Math.ceil(510/(integerVal-1));
		
		//Loop and add values to list changing colour in increments of the weighted value
		for (i = 0; i < integerVal; i++){
			var red = 0 + (weightedVal*i);
			var green = 510 - (weightedVal*i);
			if(green > 255){green = 255};
			if(green < 0){green = 0};
			if(red > 255){red = 255};

			//Format colour value string in correct format
			var value = ("rgba(" + red + ", " + green + ", 0, " + transparency + ")");
			colourList[i] = value;
		}
		//Return the list
		return colourList;
	}

</script>

<style>
table strong {;
	padding-left: 8px;
}

table tr td:hover {
	cursor:pointer;
}

table tr td .show-on-hover {
    display: none;
}

table tr td:hover .show-on-hover {
    display: inline;
}

.chart{
	display: inline-block;
	width:45%;
}

#divGeoStats{
	padding-top: 60px;
	display: inline-block;
	float: right;
	width:45%;
}

.mac-cell {
    position: relative;
}

.mac-cell-length {
	position: relative;
}

.renameOp{
	position: absolute;
    left: calc(100% - 100px);
	display: inline;
	top: 5px;
}

#reportHeader{
	font-size: 25px;
	color: "#888888";
	padding-top: 10px;
	text-align: center;
	text-decoration: underline;
}

#reportSubHeader{
	font-size: 18px;
	color: "#AAAAAA";
	padding-top: 5px;
	padding-bottom: 25px;
	text-align: center;
	font-style: italic;
}

#resultsPage{
	display:none;
}

.reportHeader{
	font-weight: bold;
	font-size: 18px;
	text-align: center;
	padding-bottom: 5px;
	color: "#DDDDDD";
}

@media (max-width: 767px) {
    .mac-cell {
        display: none;
    }
}



</style>

<div id = "tablePage">
	<br>
	<br>

	<div id="tableResults"></div>
	<div id="navButtons">
	<input id="previousPage"	[] type="button" value="Previous" onclick="previous_Page();" style="float: left;" />
	<input id="nextPage" type="button" value="Next" onclick="next_Page();" style="float: right;" visibility: hidden; />
	</div>
</div>
<div id="resultsPage">
	
	<br>
	<br>

	<p id="reportHeader"></p>
	<p id="reportSubHeader"></p>
	<div class= "contained">
		<div class="chart">
			<p class="reportHeader">Ports Used</p>
			<canvas id="portChart"></canvas>
		</div>
		<div id="divGeoStats">
			<p class="reportHeader">Geolocation</p>
			<table id="geoTableDiv"></table>
		</div>
		<br>
		<div style="display: block">
			<div id="tableBreakdown" style= "display:inline-block; padding-top: 60px"></div>
			<div class="chart" style="float:right;">
				<p class="reportHeader">Connections to IP<br>from other monitored devices</p>
				<canvas id="otherDevChart"></canvas>
			</div>
		</div>
	</div>
</div>

<div class="overlay" id="overlay" style="display:none;"></div>


<script>
get_MACs();
</script>
<br>
<div id="time"></div>
<%+footer%>